float f_mapFloat(float from_min, float from_max, float to_min, float to_max, float value) {
	return (to_min + ((to_max - to_min) / (from_max - from_min)) * (value - from_min));
}

vec3 velocityToColor(vec3 velocity) {
	vec3 color;
	float speed = length(velocity);
	float normalizedSpeed = clamp(f_mapFloat(0.0, 1.0, 0.0, 1.0, speed), 0.0, 1.0);

	if (normalizedSpeed <= 0.5) {
		float t = normalizedSpeed * 2.0;
		color = mix(vec3(0.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0), t);
	}
	else {
		float t = (normalizedSpeed - 0.5) * 2.0;
		color = mix(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 0.0), t);
	}
	return color;
}

vec3 temperatureTocolor(float temp) {
	vec3 color;
	float normalizedTemp = clamp(f_mapFloat(0.0, 30.0, 0.0, 1.0, temp), 0.0, 1.0);

	if (normalizedTemp <= 0.5) {
		float t = normalizedTemp * 2.0;
		color = mix(vec3(0.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0), t);
	}
	else {
		float t = (normalizedTemp - 0.5) * 2.0;
		color = mix(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 0.0), t);
	}
	return color;
}

vec3 particleColor(in Particle particle) {
	switch (render_particle_color_mode) {
		case 0: return temperatureTocolor(particle.temperature);
		case 1: return velocityToColor(particle.velocity.xyz);
	}

	return temperatureTocolor(particle.temperature);
}

vec3 gridColor(in Cell cell) {
	switch (render_grid_color_mode) {
		case 0: return temperatureTocolor(cell.temperature);
		case 1: return vec3(clamp(cell.density, 0, 1));
	}

	return temperatureTocolor(cell.temperature);
}