#version 460

#include "Simulation/Utils.comp"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(rgba8, binding = 0) readonly  uniform image2D pass_3;
layout(rgba8, binding = 1) writeonly uniform image2D pass_4;

uniform float iTime;
uniform uint  iFrame;
uniform uvec2 iResolution;

#define buf(uv) imageLoad(pass_3, ivec2(uv))

vec4 pass4(vec2 uv) {
	vec2 p = uv * iResolution;
	float n = buf(mod(p + N, iResolution)).x;
	float e = buf(mod(p + E, iResolution)).x;
	float s = buf(mod(p + S, iResolution)).x;
	float w = buf(mod(p + W, iResolution)).x;
	vec2 grad = vec2(e - w, n - s) / 2.;
	float lat = 180. * fract(uv.y) - 90.;
	vec2 coriolis = 15. * sin(lat*PI/180.) * vec2(-grad.y, grad.x);
	vec2 v = coriolis - grad;
	return vec4(v,0,0);
}

void main() {
	ivec2 pixel_id = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = vec2(pixel_id) / vec2(iResolution);
	vec4 fragColor;

	fragColor = pass4(uv);
	imageStore(pass_4, pixel_id, fragColor);
}