#version 460

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(rgba8, binding = 0) readonly  uniform image2D pass_4;
layout(rgba8, binding = 1) writeonly uniform image2D pass_W;
layout(rgba8, binding = 2) readonly  uniform image2D last_pass_W;

uniform float iTime;
uniform uint  iFrame;
uniform uvec2 iResolution;

#include "Simulation/Utils.comp"

vec2 getVelocity(vec2 uv) {
	vec2 v = imageLoad(pass_4, ivec2(uv * iResolution)).xy;
	if (length(v) > 1.) v = normalize(v);
	return v;
}

vec2 getPosition(vec2 fragCoord) {
	for(int i = -1; i <= 1; i++) {
		for(int j = -1; j <= 1; j++) {
			vec2 uv = (fragCoord + vec2(i,j)) / iResolution.xy;
			vec2 p = imageLoad(last_pass_W, ivec2(fract(uv) * iResolution)).xy;
			if (p == vec2(0)) {
				if (hash13(vec3(fragCoord + vec2(i,j), iFrame)) > 1e-4) continue;
				p = fragCoord + vec2(i,j) + hash21(float(iFrame)) - 0.5; // add particle
			} else if (hash13(vec3(fragCoord + vec2(i,j), iFrame)) < 8e-3) {
				continue; // remove particle
			}
			vec2 v = getVelocity(uv);
			p = p + v;
			p.x = mod(p.x, iResolution.x);
			if(abs(p.x - fragCoord.x) < 0.5 && abs(p.y - fragCoord.y) < 0.5)
				return p;
		}
	}
	return vec2(0);
}

void main() {
	ivec2 pixel_id = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = vec2(pixel_id) / vec2(iResolution);
	vec4 fragColor;

	fragColor.xy = getPosition(uv);
	fragColor.z = 0.9 * imageLoad(last_pass_W, pixel_id).z;
	if (fragColor.x > 0.0) fragColor.z = 1.;
	
	imageStore(pass_W, pixel_id, fragColor);
}