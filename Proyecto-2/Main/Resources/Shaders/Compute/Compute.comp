//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
#version 460
#include "Compute/Globals.comp"
#include "Compute/Inputs.comp"
#include "Compute/Texture.comp"
#include "Compute/Intersection.comp"
#include "Compute/Atmosphere.comp"
#include "Compute/Coloring.comp"
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

Ray f_cameraRay(vec2 uv) {
	return Ray(camera_pos, normalize(camera_p_uv + (camera_p_u * uv.x) + (camera_p_v * uv.y) - camera_pos));
}

void main() {
	ivec2 pixel_id = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = (pixel_id - 1 - vec2(resolution) / 2.0) / float(max(resolution.x, resolution.y));

	Ray ray = f_cameraRay(uv);

	mat3 rot = rot3xy( vec2( 0.0, current_time * 0.5 ) );
	vec3 sun_dir = normalize(vec3(0.0, 0.0, 1.0) * rot);

	vec4 color = vec4(0,0,0,1);
	uint octree_view_depth = 0;
	vec4 octree_color = vec4(1);
	float bvh_t_length = MAX_DIST;
	Ray bvh_ray = Ray(ray.origin, 1.0 / ray.direction);

	if (render_particles == 1) {
		float t_length = MAX_DIST;
		float t_dist = MAX_DIST;
		vec2 earth_uv = vec2(0.5);
		if (render_planet == 1) {
			if (f_EarthIntersection(ray, t_dist, earth_uv)) {
				if (t_dist < t_length && t_dist > EPSILON) {
					t_length = t_dist;
					vec3 intersection = ray.origin + ray.direction * t_dist;
					vec3 normal = normalize(intersection);
					float diffuse = max(dot(normal, sun_dir), 0.0) * 0.95 + 0.05;

					color = vec4(f_earthColor(earth_uv).xyz * diffuse, 1);
				}
			}
		}
		int closest_particle_index = f_visitBvh(ray, t_dist);
		if (closest_particle_index != -1) {
			if (t_dist < t_length && t_dist > EPSILON) {
				color = vec4(f_particleColor(particles[closest_particle_index], t_dist), 1.0);
			}
		}
	}
	else if (render_planet == 1) {
		if (f_rayBvhIntersection(bvh_ray, root_bvh)) {
			float earth_dist = MAX_DIST;
			vec2 earth_uv = vec2(0.5);
			if (f_EarthIntersection(ray, earth_dist, earth_uv)) {
				vec3 intersection = ray.origin + ray.direction * earth_dist;
				vec3 normal = normalize(intersection);
				float diffuse = max(dot(normal, sun_dir), 0.0) * 0.95 + 0.05;

				color = vec4(f_earthColor(earth_uv).xyz * diffuse, 1);
			}
		}
	}

	float octree_alpha = 1.0;
	if (render_octree == 1) {
		if (render_octree_debug == 1) {
			if (f_rayBvhIntersection(bvh_ray, bvh_nodes[render_octree_debug_index])) {
				octree_alpha = 0.5f;
				if (render_octree_hue == 1) {
					octree_color = floatToColor(float(render_octree_debug_index) / float(bvh_nodes.length()));
				}
			}
		}
		else {
			for (int i = 0; i < bvh_nodes.length(); i++) {
				Bvh node = bvh_nodes[i];
				node.p_min += 0.1;
				node.p_max -= 0.1;
				if (f_rayBvhIntersection(bvh_ray, node)) {
					octree_view_depth++;
					if (render_octree_hue == 1) {
						octree_color = floatToColor(float(i) / float(bvh_nodes.length()));
					}
				}
			}
		}
	}
	for (int i = 0; i < octree_view_depth; i++) {
		octree_alpha *= 0.95;
	}

	if (render_atmosphere == 1) {
		vec2 e = ray_vs_sphere( ray.origin, ray.direction, ATMOSPHERE_RADIUS );
		if ( e.x <= e.y ) {
			vec2 f = ray_vs_sphere( ray.origin, ray.direction, EARTH_RADIUS );
			e.y = min( e.y, f.x );
			vec3 I = in_scatter( ray.origin, ray.direction, e, sun_dir );
			color.rgb += I;
		}
	}

	color = clamp(mix(octree_color, color, octree_alpha), 0.0, 1.0);
	imageStore(raw_render_layer, pixel_id, color);
}