//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
#version 460
#include "Globals.comp"
#include "Inputs.comp"
#include "Coloring.comp"
#include "Intersection.comp"
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

Ray f_cameraRay(vec2 uv) {
	return Ray(camera_pos, normalize(camera_p_uv + (camera_p_u * uv.x) + (camera_p_v * uv.y) - camera_pos));
}

void main() {
	ivec2 pixel_id = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = (pixel_id - 1 - vec2(resolution) / 2.0) / float(max(resolution.x, resolution.y));

	Ray ray = f_cameraRay(uv);
	Ray bvh_ray = ray;
	bvh_ray.direction = 1.0 / ray.direction;

	vec4 color = vec4(0,0,0,1);
	vec3 half_grid_size = vec3(grid_size / 2) * cell_size;
	if (f_rayAABBIntersection(bvh_ray, -half_grid_size, half_grid_size)) {
		if (render_grid == 1) {
			if (render_grid_surface == 1) {
				float t_length = MAX_DIST;
				float t_dist = MAX_DIST;
				for (uint x = 0; x < grid_size.x; ++x) {
					for (uint y = 0; y < grid_size.y; ++y) {
						for (uint z = 0; z < grid_size.z; ++z) {
							AABB box;
							box.pmin = vec3(x, y, z) * cell_size - half_grid_size ;
							box.pmax = box.pmin + cell_size;
							if (f_rayAABBIntersection(bvh_ray, box.pmin, box.pmax, t_dist)) {
								if (t_dist < t_length && t_dist > EPSILON) {
									t_length = t_dist;
									uint index = x * (grid_size.y * grid_size.z) + y * grid_size.z + z;
									Cell cell = grid[index];
									if (render_grid_density == 1) {
										color = vec4(temperatureTocolor(cell.temperature), 0.0) * cell.density * render_grid_density_mul;
									}
									else {
										color = vec4(temperatureTocolor(cell.temperature), 0.0) ;
									}
								}
							}
						}
					}
				}
			}
			else {
				float color_step = (1.0 / (max(max(grid_size.x, grid_size.y), grid_size.z))) * render_grid_opacity;
				for (uint x = 0; x < grid_size.x; ++x) {
					for (uint y = 0; y < grid_size.y; ++y) {
						for (uint z = 0; z < grid_size.z; ++z) {
							AABB box;
							box.pmin = vec3(x, y, z) * cell_size - half_grid_size ;
							box.pmax = box.pmin + cell_size;
							if (f_rayAABBIntersection(bvh_ray, box.pmin, box.pmax)) {
								uint index = x * (grid_size.y * grid_size.z) + y * grid_size.z + z;
								Cell cell = grid[index];
								if (render_grid_density == 1) {
									color += vec4(temperatureTocolor(cell.temperature), 0.0) * cell.density * render_grid_density_mul;
								}
								else {
									color += vec4(temperatureTocolor(cell.temperature), 0.0) * color_step;
								}
							}
						}
					}
				}
			}
		}
		if (render_particles == 1) {
			float t_length = MAX_DIST;
			float t_dist = MAX_DIST;
			for (uint i = 0; i < point_cloud.length(); i++) {
				if (f_raySphereIntersection(ray, point_cloud[i].position.xyz, t_dist)) {
					if (t_dist < t_length && t_dist > EPSILON) {
						t_length = t_dist;
						color = vec4(temperatureTocolor(point_cloud[i].temperature), 1.0);
					}
				}
			}
		}
	}

	color = clamp(color, 0.0, 1.0);
	imageStore(raw_render_layer, pixel_id, color);
}