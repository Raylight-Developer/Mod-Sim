//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
#version 460
#include "Globals.comp"
#include "Inputs.comp"
#include "Texture.comp"
#include "Coloring.comp"
#include "Intersection.comp"
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

Ray f_cameraRay(vec2 uv) {
	return Ray(camera_pos, normalize(camera_p_uv + (camera_p_u * uv.x) + (camera_p_v * uv.y) - camera_pos));
}

void main() {
	ivec2 pixel_id = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = (pixel_id - 1 - vec2(resolution) / 2.0) / float(max(resolution.x, resolution.y));

	Ray ray = f_cameraRay(uv);

	vec4 color = vec4(0,0,0,1);
	if (render_particles == 1) {
		float t_length = MAX_DIST;
		float t_dist = MAX_DIST;
		vec2 earth_uv = vec2(0.5);
		if (f_raySphereIntersection(ray, vec3(0), 6.371, t_dist, earth_uv)) {
			if (t_dist < t_length && t_dist > EPSILON) {
				t_length = t_dist;
				color = sampleTextureRgba8u(textures[0], earth_uv);
			}
		}
		for (uint i = 0; i < point_cloud.length(); i++) {
			if (f_raySphereIntersection(ray, point_cloud[i].position.xyz, t_dist)) {
				if (t_dist < t_length && t_dist > EPSILON) {
					t_length = t_dist;
					color = vec4(particleColor(point_cloud[i], t_dist), 1.0);
				}
			}
		}
	}
	else {
		float earth_dist = MAX_DIST;
		vec2 earth_uv = vec2(0.5);
		if (f_raySphereIntersection(ray, vec3(0), 6.371, earth_dist, earth_uv)) {
			color = sampleTextureRgba8u(textures[0], earth_uv);
		}
	}

	color = clamp(color, 0.0, 1.0);
	imageStore(raw_render_layer, pixel_id, color);
}